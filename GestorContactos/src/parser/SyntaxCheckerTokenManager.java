package parser;
/* SyntaxCheckerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SyntaxCheckerTokenManager.java */
import javax.xml.bind.DatatypeConverter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

/** Token Manager. */
public class SyntaxCheckerTokenManager implements SyntaxCheckerConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 21;
            return 6;
         }
         if ((active0 & 0x100L) != 0L)
            return 4;
         if ((active0 & 0x7feb4L) != 0L)
         {
            jjmatchedKind = 23;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x200L) != 0L)
            return 4;
         if ((active0 & 0x7fcf4L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x14c0L) != 0L)
            return 4;
         if ((active0 & 0x7e834L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x800L) != 0L)
            return 4;
         if ((active0 & 0x7e034L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x1c014L) != 0L)
            return 4;
         if ((active0 & 0x62020L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x62020L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x62000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 6;
            return 4;
         }
         if ((active0 & 0x20L) != 0L)
            return 4;
         return -1;
      case 7:
         if ((active0 & 0x62000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0x62000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 8;
            return 4;
         }
         return -1;
      case 9:
         if ((active0 & 0x62000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 9;
            return 4;
         }
         return -1;
      case 10:
         if ((active0 & 0x62000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 10;
            return 4;
         }
         return -1;
      case 11:
         if ((active0 & 0x62000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 11;
            return 4;
         }
         return -1;
      case 12:
         if ((active0 & 0x2000L) != 0L)
            return 4;
         if ((active0 & 0x60000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 12;
            return 4;
         }
         return -1;
      case 13:
         if ((active0 & 0x60000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 13;
            return 4;
         }
         return -1;
      case 14:
         if ((active0 & 0x20000L) != 0L)
            return 4;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 14;
            return 4;
         }
         return -1;
      case 15:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 15;
            return 4;
         }
         return -1;
      case 16:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 16;
            return 4;
         }
         return -1;
      case 17:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 17;
            return 4;
         }
         return -1;
      case 18:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 18;
            return 4;
         }
         return -1;
      case 19:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 19;
            return 4;
         }
         return -1;
      case 20:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 20;
            return 4;
         }
         return -1;
      case 21:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 21;
            return 4;
         }
         return -1;
      case 22:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 22;
            return 4;
         }
         return -1;
      case 23:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 23;
            return 4;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 50:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 58:
         return jjStopAtPos(0, 3);
      case 59:
         return jjStopAtPos(0, 19);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x804L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x68080L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 78:
         return jjStartNfaWithStates_0(0, 8, 4);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x5000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x30L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x1024L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 78:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 4);
         return jjMoveStringLiteralDfa2_0(active0, 0x60080L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 4);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0xa810L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000L);
      case 68:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 4);
         break;
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 76:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 4);
         break;
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 82:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x8004L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x2010L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 89:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 4);
         break;
      case 68:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 4, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0x60000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 76:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 4);
         break;
      case 78:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 2, 4);
         break;
      case 79:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 4);
         break;
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x60000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa9_0(active0, 0x60000L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
      case 81:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 56:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(12, 13, 4);
         break;
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 54:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 52:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(14, 17, 4);
         break;
      case 68:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa22_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa23_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
static private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa24_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
static private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(24, 18, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xf3fffffeffffdbffL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(4); }
                  }
                  if ((0x3ff280000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  break;
               case 6:
                  if ((0xf3fffffeffffdbffL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     { jjCheckNAdd(4); }
                  }
                  if ((0x3ff280000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 0:
                  if ((0x3ff280000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if (curChar != 61)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 4:
                  if ((0xf3fffffeffffdbffL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 4:
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(4); }
                  break;
               case 6:
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(4); }
                  break;
               case 2:
                  if ((0x7eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x7eL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 4:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(4); }
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  { jjCheckNAdd(4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, "\102\105\107\111\116", "\72", "\126\103\101\122\104", 
"\126\105\122\123\111\117\116", "\62\56\61", "\105\116\104", "\116", "\106\116", "\101\104\122", 
"\102\104\101\131", "\124\105\114", "\103\110\101\122\123\105\124\75\125\124\106\55\70", 
"\124\131\120\105\75", "\105\115\101\111\114", "\120\110\117\124\117", 
"\105\116\103\117\104\111\116\107\75\102\101\123\105\66\64", 
"\105\116\103\117\104\111\116\107\75\121\125\117\124\105\104\55\120\122\111\116\124\101\102\114\105", "\73", "\15\12", null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   1, 2, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public SyntaxCheckerTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public SyntaxCheckerTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 5; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffdL, 
};
static final long[] jjtoSkip = {
   0x2L, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[5];
    static private final int[] jjstateSet = new int[2 * 5];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
