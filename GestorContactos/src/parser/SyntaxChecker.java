package parser;
/* SyntaxChecker.java */
/* Generated By:JavaCC: Do not edit this line. SyntaxChecker.java */
import javax.xml.bind.DatatypeConverter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import model.Contact;

public class SyntaxChecker implements SyntaxCheckerConstants {

  static final public void S(ArrayList<Contact> contactList) throws ParseException {Contact c = new Contact();
    label_1:
    while (true) {
      A(c);
contactList.add(c);c = new Contact();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 2:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
}

  static final public void A(Contact c) throws ParseException {
    jj_consume_token(2);
    jj_consume_token(3);
    jj_consume_token(4);
    jj_consume_token(CRLF);
    B(c);
}

  static final public void B(Contact c) throws ParseException {
    jj_consume_token(5);
    jj_consume_token(3);
    jj_consume_token(6);
    jj_consume_token(CRLF);
    C(c);
}

  static final public void C(Contact c) throws ParseException {Token type; Token name; StringBuilder builder = new StringBuilder();
    jj_consume_token(8);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 3:{
      jj_consume_token(3);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WORD:{
          name = jj_consume_token(WORD);
builder.append(name.toString());
          break;
          }
        case 19:{
          jj_consume_token(19);
builder.append(";");
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 19:
        case WORD:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
String[] parts = builder.toString().split(";",-1);
         c.getName().setGivenName(parts[0]);
         c.getName().setFamilyName(parts[1]);
         c.getName().setAdditionalName(parts[2]);
         c.getName().setHonorificPreffix(parts[3]);
         c.getName().setHonorificSuffix(parts[4]);
      break;
      }
    case 19:{
      jj_consume_token(19);
      jj_consume_token(13);
      jj_consume_token(19);
      jj_consume_token(18);
      jj_consume_token(3);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case QUOTED:{
          name = jj_consume_token(QUOTED);
byte[] bytes = DatatypeConverter.parseHexBinary(name.toString().replace("=",""));
                              try{
                                  String result= new String(bytes, "UTF-8");
                                  builder.append(result);
                                 } catch(UnsupportedEncodingException e){}
          break;
          }
        case 19:{
          jj_consume_token(19);
builder.append(";");
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 19:
        case QUOTED:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
      }
String[] parts = builder.toString().split(";",-1);
         c.getName().setGivenName(parts[0]);
         c.getName().setFamilyName(parts[1]);
         c.getName().setAdditionalName(parts[2]);
         c.getName().setHonorificPreffix(parts[3]);
         c.getName().setHonorificSuffix(parts[4]);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CRLF);
    D(c);
}

  static final public void D(Contact c) throws ParseException {Token fname;StringBuilder builder = new StringBuilder();StringBuilder builder2 = new StringBuilder();
    jj_consume_token(9);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 3:{
      jj_consume_token(3);
      label_4:
      while (true) {
        fname = jj_consume_token(WORD);
builder.append(fname.toString() + " ");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WORD:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
      }
c.setFormattedName(builder.toString());
      jj_consume_token(CRLF);
      break;
      }
    case 19:{
      jj_consume_token(19);
      jj_consume_token(13);
      jj_consume_token(19);
      jj_consume_token(18);
      jj_consume_token(3);
      label_5:
      while (true) {
        fname = jj_consume_token(QUOTED);
byte[] bytes = DatatypeConverter.parseHexBinary(fname.toString().replace("=",""));
          try{
              String result= new String(bytes, "UTF-8");
              builder.append(result);
                        } catch(UnsupportedEncodingException e){}
builder2.append(builder.toString());builder = new StringBuilder();
        jj_consume_token(CRLF);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case QUOTED:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
      }
c.setFormattedName(builder2.toString());
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    E(c);
}

  static final public void E(Contact c) throws ParseException {Token tel;Token type;ArrayList<String> types = new ArrayList<String>();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 12:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      jj_consume_token(12);
      jj_consume_token(19);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 14:
        case WORD:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WORD:{
          type = jj_consume_token(WORD);
types.add(type.toString());
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 19:{
              ;
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              break label_8;
            }
            jj_consume_token(19);
          }
          break;
          }
        case 14:{
          jj_consume_token(14);
          type = jj_consume_token(WORD);
types.add(type.toString());
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 19:{
              ;
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              break label_9;
            }
            jj_consume_token(19);
          }
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(3);
      label_10:
      while (true) {
        tel = jj_consume_token(NUM);
c.addTelephone(tel.toString(),types);types = new ArrayList<String>();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUM:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(CRLF);
    }
    F(c);
}

  static final public void F(Contact c) throws ParseException {Token em;Token type;ArrayList<String> types = new ArrayList<String>();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_11;
      }
      jj_consume_token(15);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 14:
        case 19:
        case WORD:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_12;
        }
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 14:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_13;
          }
          jj_consume_token(14);
        }
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 19:{
            ;
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            break label_14;
          }
          jj_consume_token(19);
        }
        type = jj_consume_token(WORD);
types.add(type.toString());
      }
      jj_consume_token(3);
      em = jj_consume_token(WORD);
c.addEmail(em.toString(),types);types = new ArrayList<String>();
      jj_consume_token(CRLF);
    }
    G(c);
}

  static final public void G(Contact c) throws ParseException {Token type;String ty = "";
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 10:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_15;
      }
      jj_consume_token(10);
      jj_consume_token(19);
      type = jj_consume_token(WORD);
ty = type.toString();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 3:{
        jj_consume_token(3);
        G1(c,ty);
        break;
        }
      case 19:{
        jj_consume_token(19);
        G2(c,ty);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CRLF);
    }
    H(c);
}

  static final public void G1(Contact c, String type) throws ParseException {Token adr;StringBuilder builder = new StringBuilder();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        adr = jj_consume_token(NUM);
builder.append(adr.toString() + " ");
        break;
        }
      case WORD:{
        adr = jj_consume_token(WORD);
builder.append(adr.toString() + " ");
        break;
        }
      case 19:{
        jj_consume_token(19);
builder.append(";");
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 19:
      case NUM:
      case WORD:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_16;
      }
    }
String[] parts = builder.toString().split(";",-1);
                                c.addAddress(type, parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]);
}

  static final public void G2(Contact c, String type) throws ParseException {Token adr;StringBuilder builder2 = new StringBuilder();
    jj_consume_token(13);
    jj_consume_token(19);
    jj_consume_token(18);
    jj_consume_token(3);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTED:{
        adr = jj_consume_token(QUOTED);
byte[] bytes = DatatypeConverter.parseHexBinary(adr.toString().replace("=",""));
                        try{
                            String result= new String(bytes, "UTF-8");
                            builder2.append(result);
                            } catch(UnsupportedEncodingException e){}
        break;
        }
      case 19:{
        jj_consume_token(19);
builder2.append(";");
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 19:
      case QUOTED:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_17;
      }
    }
String[] parts = builder2.toString().split(";",-1);
                       c.addAddress(type, parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]);
}

  static final public void H(Contact c) throws ParseException {Token pic;Token ext;StringBuilder builder = new StringBuilder();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 16:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_18;
      }
      jj_consume_token(16);
      jj_consume_token(19);
      jj_consume_token(17);
      jj_consume_token(19);
      ext = jj_consume_token(WORD);
c.getPhoto().setPicExtension(ext.toString());
      jj_consume_token(3);
      label_19:
      while (true) {
        pic = jj_consume_token(WORD);
builder.append(pic.toString());
        jj_consume_token(CRLF);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WORD:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_19;
        }
      }
c.getPhoto().setEncodedContent(builder.toString());
      jj_consume_token(CRLF);
    }
    I(c);
}

  static final public void I(Contact c) throws ParseException {Token bday;
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 11:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_20;
      }
      jj_consume_token(11);
      jj_consume_token(3);
      bday = jj_consume_token(NUM);
c.setBirthday(bday.toString());
      jj_consume_token(CRLF);
    }
    Z();
}

  static final public void Z() throws ParseException {
    jj_consume_token(7);
    jj_consume_token(3);
    jj_consume_token(4);
    jj_consume_token(CRLF);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SyntaxCheckerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x4,0x880000,0x880000,0x480000,0x480000,0x80008,0x800000,0x400000,0x80008,0x1000,0x804000,0x80000,0x80000,0x804000,0x200000,0x8000,0x884000,0x4000,0x80000,0x400,0x80008,0xa80000,0xa80000,0x480000,0x480000,0x10000,0x800000,0x800,};
	}

  /** Constructor with InputStream. */
  public SyntaxChecker(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SyntaxChecker(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SyntaxCheckerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SyntaxChecker(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SyntaxCheckerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SyntaxCheckerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SyntaxChecker(SyntaxCheckerTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SyntaxCheckerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[24];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 28; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 24; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
